---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ThinkPad E475.
--- DateTime: 2019/4/15 11:15
---

OpenList = require("obj.OpenList")
CloseList = require("obj.CloseList")
PathNode = require("obj.PathNode")

Astar = {}

-- 地图数据
-- 0:可通行
-- 1:不可通行(障碍物)
-- 2:路径点
Astar.mapGird = nil


Astar.girdX = 8 -- 地图x轴大小
Astar.girdY = 8 -- 地图y轴大小
Astar.openList = nil
Astar.closeList = nil
--获取最短路径
-- ox,oy:起点坐标
-- dx,dy:终点坐标
-- dir:方向
function Astar.getPath(map,ox,oy,dx,dy,dir)
    -- init
    Astar.mapGird = map
    Astar.openList = OpenList:new()
    Astar.closeList = CloseList:new()
    --
    local pathList = {}
    local originNode = PathNode:new(ox,oy,0,Astar.calcH(ox,oy,dx,dy))
    Astar.openList:add(originNode)

    while true do
        local minFNote = Astar.openList:getMinF()
        Astar.openList:remove(minFNote)
        Astar.closeList:add(minFNote)
        local aroundNotes = Astar.getNodeAround(minFNote)
        for k,arouNote in pairs(aroundNotes) do
            arouNote.father = minFNote
            if arouNote ~= originNode and arouNote.father ~= originNode then
                if Astar.checkInLine(arouNote, minFNote, minFNote.father) then
                    arouNote:setF(minFNote.g+1, Astar.calcH(arouNote.x,arouNote.y,dx,dy))
                else
                    arouNote:setF(minFNote.g+2, Astar.calcH(arouNote.x,arouNote.y,dx,dy))
                end
            elseif arouNote.father == originNode then
                local vec = {{x=0,y=1},{x=0,y=-1},{x=-1,y=0},{x=1,y=0}}
                local tx,ty = arouNote.x-arouNote.father.x, arouNote.y-arouNote.father.y
                if vec[dir].x*tx + vec[dir].y*ty == 0 then
                    arouNote:setF(minFNote.g+2, Astar.calcH(arouNote.x,arouNote.y,dx,dy))
                elseif vec[dir].x+tx==0 and vec[dir].y+ty==0 then
                    arouNote:setF(minFNote.g+3, Astar.calcH(arouNote.x,arouNote.y,dx,dy))
                else
                    arouNote:setF(minFNote.g+1, Astar.calcH(arouNote.x,arouNote.y,dx,dy))
                end
            end
            Astar.openList:add(arouNote)
            if arouNote.x == dx and arouNote.y == dy then
                local tempPathList = {}
                local currNote = arouNote
                while currNote do
                    table.insert(tempPathList, currNote)
                    currNote = currNote.father
                end
                for i=#tempPathList,1,-1 do
                    table.insert(pathList, tempPathList[i])
                end
                -- 测试
                if Astar.closeList.close then
                    for k,node in pairs(Astar.closeList.close) do
                        local x,y = node.x,node.y
                        Astar.mapGird["0,0"][x+y*Astar.girdX] = 3
                    end
                end
                --------
                return pathList
            end
        end
        if Astar.openList:isEmpty() then
            break
        end
    end
    -- 测试
    if Astar.closeList.close then
        for k,node in pairs(Astar.closeList.close) do
            local x,y = node.x,node.y
            Astar.mapGird["0,0"][x+y*Astar.girdX] = 3
        end
    end
    --------
    return nil
end

-- 获取某坐标位置的数据
function Astar.getPosInfo(x,y)
    --- 搜索代码
    local nx = math.modf(x/8)
    local ny = math.modf(y/8)
    local map = Astar.mapGird[tostring(nx)..","..tostring(ny)]
    if map then
        return true, map[(x-nx*8)+(y-ny*8)*Astar.girdX]
    end
    return false
end

function Astar.calcH(x,y,dx,dy)
    return 1*math.abs(x-dx)+math.abs(y-dy)
end

--检查3个格子是否成一条直线
function Astar.checkInLine(node1, node2, node3)
    if (node1.x==node2.x and node1.x==node3.x)
            or (node1.y==node2.y and node1.y==node3.y) then
        return true
    end
    return false
end

--检查格子是否符合条件
--忽略超出地图节点、障碍物节点、在closeList当中的节点
function Astar.checkNode(node)
    local x,y = node.x,node.y
    local hasnote, ntype = Astar.getPosInfo(x,y)
    if not hasnote then
        return false
    end
    if ntype == 1 then
        return false
    end
    if Astar.closeList:contains(node) then
        return false
    end
    return true
end

--获取周围的格子
function Astar.getNodeAround(node)
    local x,y = node.x, node.y
    local nodeList = {
            PathNode:new(x, y-1),
            PathNode:new(x, y+1),
            PathNode:new(x-1, y),
            PathNode:new(x+1, y),
            }
    local newList = {}
    for k,v in pairs(nodeList) do
        if Astar.checkNode(v) then
            table.insert(newList, v)
        end
    end
    return newList
end

--打印地图
function Astar.printMap(pathList)
    for j=0,1 do
        local map = Astar.mapGird["0,"..tostring(j)]
        for i=0,#map do
            local hasNote = false
            if pathList then
                for k,v in pairs(pathList) do
                    local x,y = v.x,v.y
                    if x+y*Astar.girdX == i+j*8*8 then
                        io.stdout:write(string.format(" %-2d", k))
                        hasNote = true
                    end
                end
            end
            if not hasNote then
                if map[i]==0 then
                    io.stdout:write(" - ")
                elseif map[i]==1 then
                    io.stdout:write(" # ")
                elseif map[i]==2 then
                    io.stdout:write(" * ")
                elseif map[i]==3 then
                    io.stdout:write(" ! ")
                end
            end
            if (i+1)%8==0 then
                io.stdout:write("\n")
            end
        end
    end
end

return Astar
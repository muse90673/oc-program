---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ThinkPad E475.
--- DateTime: 2019/4/21 14:45
---

thread = require("thread")
event = require("event")
comp = require("component")


local status = ""
--- size:
--- ox,lx
--- oy,ly
--- oz,lz
--- block:
--- x,y,z
--- curr_work:
--- dx,dy,dz
local workStatus = {}
local map = require("obj.Map")
local listenID
local pathing = require("util.AstarPathing")

function work()
    local block = workStatus.block
    local wsize = workStatus.size
    local curr_work = workStatus.curr_work

    if block then
        block.x = wsize.ox
        block.y = wsize.oy
        block.z = wsize.oz
        curr_work.dx = 1
        curr_work.dy = 1
        curr_work.dz = -1
        curr_work.cx, curr_work.cy, curr_work.cz = 0
    end
    --local is_continue = true
    -- 搜索下一个可挖掘方块
    while true do
        local bi = pathing.getPosInfo(block.x,block.y,block.z)
        if bi then
            if bi == 1 then
                break
            end
            if curr_work.cz == wsize.lz then
                curr_work.dz = curr_work.dz*-1
                -- 工作区域内所有方块被挖完
            elseif curr_work.cy == wsize.ly then
                block.z = block.z + curr_work.dz
                curr_work.cz = curr_work.cz + 1
                curr_work.dy = curr_work.dy*-1
                curr_work.cy = 0
            elseif curr_work.cx == wsize.lx then
                block.y = block.y + curr_work.dy
                curr_work.cy = curr_work.cy + 1
                curr_work.dx = curr_work.dx*-1
                curr_work.cx = 0
            else
                block.x = block.x + curr_work.dx
                curr_work.cx = curr_work.cx + 1
            end

        else
            -- error
            break
        end

    end

    move()
    -- 挖掘
end

function nextBlock()

end

function move(x,y,z)
    -- setmap x,y,z = 0
    -- 获取路径 path.getpath()
    -- 移动到该路径

end

function scan()
    -- 扫描以自身为中心范围内
    -- 扫描过程：
    --    先检查磁盘是否有地图
    --    如果没有，则请求服务器
    --    如果服务器没有，则扫描这块地图
    -- 如果扫描失败，则尝试前往扫描
    -- 不能扫描工作区域之外的地图
    local x,y,z = getLocation()

    local scanx,scany,scanz = x-32, y-32, z-32
    scanx = scanx-(scanx%-map.girdX)
    scany = scany-(scany%-map.girdY)
    scanz = scanz-(scanz%-map.girdZ)
    for iy=scany, y+32-map.girdY, map.girdY do
        for ix=scanx, x+32-map.girdX, map.girdX do
            local flag = false
            for iz=scanz, z+32-map.girdZ, map.girdZ do
                local cx = ix/map.girdX
                local cy = iy/map.girdY
                local cz = iz/map.girdZ
                if not map:hasChunk(cx,cy,cz) then
                    flag = true
                    break
                end
            end
            if flag then
                local datas = {}
                for sy=iy,iy+map.girdY-1 do
                    for sx=ix,ix+map.girdX-1 do
                        local data = comp.geolyzer.scan(sx-x,sy-y)
                        print("scan:x="..tostring(sx-x)..",y="..tostring(sy-y))
                        table.insert(datas,data)
                    end
                end
                for sz=scanz, z+32-map.girdZ, map.girdZ do
                    local cx = ix/map.girdX
                    local cy = iy/map.girdY
                    local cz = sz/map.girdZ
                    if not map:hasChunk(cx,cy,cz) then
                        local chunk = {}
                        local index = 0
                        for jz=sz, sz+map.girdZ-1 do
                            for j=1, map.girdX*map.girdY do
                                local info = datas[j][jz-z]
                                if info ~= 0 then
                                    chunk[index] = 1
                                else
                                    chunk[index] = 0
                                end
                                index=index+1
                            end
                            print("save:z="..tostring(jz-z))
                        end
                        map:saveChunk(cx,cy,cz,chunk)
                    end
                end
            end
        end
    end

end

function back()

end

function getLocation()
    local wp = comp.navigation.findWaypoints(512)
    for k,v in pairs(wp) do
        if v["label"] == "origin" then
            local x = -v["position"][1]
            local y = -v["position"][2]
            local z = -v["position"][3]
            return x,y,z
        end
    end
    print("get position faild! waypoint \"origin\" not found!")
    return nil
end

function receiveMessage(a,b,c,d,e,order)
    status = order
end

function printStatus()

end

function run()
    --listenID = event.listen("modem_message",receiveMessage)

    while true do
        if status=="work" then
            work()
        elseif status == "scan" then
            scan()
        elseif status == "back" then
            back()
        end
        os.sleep(0)
    end
    event.cancel(listenID)
end
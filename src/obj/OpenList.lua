---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ThinkPad E475.
--- DateTime: 2019/4/15 0:36
---

PathNode = require("PathNode")

OpenList = {}
OpenList.__index = OpenList

function OpenList:new()
    local o = {}
    setmetatable(o, OpenList)
    o.open = {}
    return o
end

function OpenList:add(pathNode)
    table.insert(self.open, pathNode)
end

function OpenList:getMinF()
    local min
    for k,v in pairs(self.open) do
        if min == nil then
            min = v
        else
            if v.f<min.f then
                min = v
            end
        end
    end
    return min
end

function OpenList:remove(pathNode)
    if not self:isEmpty() then
        for k,v in pairs(self.open) do
            if v==pathNode then
                table.remove(self.open, k)
                break
            end
        end
    end
end

function OpenList:contains(pathNode)
    if not self:isEmpty() then
        for k,v in pairs(self.open) do
            if v.x==pathNode.x and v.y==pathNode.y and v.z==pathNode.z then
                return true
            end
        end
    end
    return false
end

function OpenList:isEmpty()
    if #self.open == 0 then
        return true
    else
        return false
    end
end

return OpenList